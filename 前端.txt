面试
方面：
1.
什么类型，前后端分离spar应用，外卖，公共模块，主要的技术。
项目的开发模式：模块化。组件化，工程化。
2.技术选型
主要的技术，（库，工具）先分类：
a.vue 以及其相关的插件（Vue全家桶）：组件化开发
b.前后台交互：发ajax请求（用什么发：ajax请求库，测试借口，模拟数据）
c.编码特点：模块编码：es6，webpack。
工程化：项目构建：
3.API借口（前后台交互）
a.url
b.请求方式
c.请求参数
c.相应数据格式



学到了什么？
开发的方式
库
布局上的方式


代理（服务器）？
作用：转发请求
是什么？
运行在前台，其实也是一些程序。相当于是在坚听8080接口。拦截请求，转发请求。前台是用来展示给客户的。
转发到哪：看你的配置，配置来告诉代理


mock.js：生成随机数据，拦截ajax数据。
测试方法：写代码，ajax请求才能进行测试。


后台数据基本放到state里面去。




二位数组：
数组里的元素依旧是数组，




路由跳转的相关问题：
go（n）：跳转到指定的，想要几页的页面。n可以为负数
this.$router.push():跳转到下一个界面，会在history中留下历史记录、当点返回的时候，会返回上一个界面。
this.$router.replace():同样是跳转到上一个界面，但不会再history中留下历史记录，会返回上上个界面。


！的合理使用：



会话存储
cookie：maxage


json本身就两种结构
对象和数组
对象数组无序，数组对象有序







tcp/ip、
Linux、



表单前台验证：减少请求，减少后台压力。
根据商家的表示（code）来判断登录请求是否成功。


通过debugger调试：对模块化，工程化，组件化是十分重要的
两种方式：
1.自己窗口打标点（端点）
2.写debugger语句

前台应用和后台应用独立开发的，mock.js,
json数据的类型和名称应该是一样且统一的


前后端分离：json
非前后端分离：jsp。


better-scroll：
重点解决移动端各种场景需求的插件，是基于原生js实现的，不依赖任何框架，是一种轻量级的js

this.$nextTick()的使用：
将回调延迟到下次dom更新循环之后执行，在修改数据之后立即使用它，然后等待dom更新。其和vue.nexttick一样，不同的是回调的this自动绑定到调用它的实例上。假设我们更改了某个dom元素内部的文本，而这个时候，我们鲜花港打印出这个被改变的文本需要dom更新之后才会实现的，也就好比我们将打印输出的代码放在setTimeout(fn, 0)中；

probeType
0：不派发scoll
1：滑动一定时间后派发滚动事件
2：屏幕滑动时实时派发滚动事件
3：




让在一个已经有数据绑定的数据里面添加一个新的数据（这个数据默认是没有数据绑定的，但是我想让他有）
用vue.set方法解决


传参：
1.父子
2.子父
3.兄弟
